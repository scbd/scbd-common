{"version":3,"file":"thesaurus.test.js","sources":["../../../src/services/api/api-base.js","../../../src/services/api/thesaurus.js","../../../src/services/api/thesaurus.test.js"],"sourcesContent":["import axios from 'axios'\r\nimport { isFunction } from 'lodash'\r\nimport * as Vue from 'vue'\r\n\r\nlet sitePrefixUrl = 'https://api.cbd.int';\r\n\r\nif(/\\.cbd\\.int$/i   .test(window?.location?.hostname || '')) sitePrefixUrl= 'https://api.cbd.int';\r\nif(/\\.cbddev\\.xyz$/i.test(window?.location?.hostname || '')) sitePrefixUrl= 'https://api.cbddev.xyz';\r\nif(/\\localhost$/i   .test(window?.location?.hostname || '')) sitePrefixUrl= '/';\r\n\r\nconst defaultOptions = { \r\n   prefixUrl:  sitePrefixUrl, \r\n   timeout  : 30 * 1000,\r\n   token: Vue?.prototype?.$auth?.strategy?.token?.get()  \r\n}\r\n\r\nexport default class ApiBase\r\n{\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    if(isFunction(options)) options = { token : options }\r\n\r\n    const { token, prefixUrl, timeout, tokenType } = { ...defaultOptions, ...options }\r\n\r\n    this.config = {\r\n      baseURL : prefixUrl,\r\n      timeout,\r\n      tokenType,\r\n      token,\r\n    }\r\n\r\n    const http = async function (...args) {   \r\n      return (await loadAsyncHeaders(this.config))(...args);\r\n    }\r\n\r\n    http.get     = async (...args)=> (await loadAsyncHeaders(this.config)).get    (...args);\r\n    http.head    = async (...args)=> (await loadAsyncHeaders(this.config)).head   (...args);\r\n    http.post    = async (...args)=> (await loadAsyncHeaders(this.config)).post   (...args);\r\n    http.put     = async (...args)=> (await loadAsyncHeaders(this.config)).put    (...args);\r\n    http.patch   = async (...args)=> (await loadAsyncHeaders(this.config)).patch  (...args);\r\n    http.delete  = async (...args)=> (await loadAsyncHeaders(this.config)).delete (...args);\r\n    http.options = async (...args)=> (await loadAsyncHeaders(this.config)).options(...args);\r\n    http.request = async (...args)=> (await loadAsyncHeaders(this.config)).request(...args);\r\n\r\n    this.http = http;\r\n  }\r\n}\r\n\r\nasync function loadAsyncHeaders(baseConfig) {\r\n\r\n  const { token, tokenType, ...config } = baseConfig || {}\r\n\r\n  const headers = { ...(config.headers || {}) };\r\n\r\n  if(token) {\r\n      headers.Authorization = `${tokenType||'Bearer'} ${token}`;\r\n  }\r\n\r\n  return axios.create({ ...config, headers } );\r\n\r\n}\r\n\r\n//////////////////////////\r\n// Helpers\r\n////////////////////////\r\n\r\nexport function tryCastToApiError(error) {\r\n\r\n  if(error && error.response && error.response.data && error.response.data.code) {\r\n      const apiError = error.response.data\r\n      throw error.response.data;\r\n  }\r\n\r\n  throw error\r\n}\r\n\r\nexport function stringifyUrlParam(value) {\r\n  if (value instanceof(Date))   {return value.toISOString()}    \r\n  if (value instanceof(Object)) {return JSON.stringify(value)}  \r\n  return value; \r\n}\r\n\r\nexport function stringifyUrlParams(valueObj) {\r\n  const returnObj = {};\r\n\r\n  for (const [key, value] of Object.entries(valueObj)) {\r\n    if (isValid(value)){\r\n      returnObj[key] = stringifyUrlParam(value);\r\n    }\r\n  }\r\n  \r\n  return returnObj;\r\n}\r\n\r\nexport function mapObjectId(id){  \r\n  return isObjectId(id)? { $oid: id } : id\r\n}\r\n\r\nexport function isObjectId(id){\r\n  return /^[a-f0-9]{24}/i.test(id);\r\n}\r\n\r\nexport function isValid(params){\r\n  return ![undefined, null].includes(params);\r\n}","\r\nimport ApiBase, { tryCastToApiError, stringifyUrlParam, isValid} from './api-base';\r\n\r\nexport default class ThesaurusApi extends ApiBase\r\n{\r\n  \r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  async getDomains()  { \r\n    return this.http.get(`/api/v2013/thesaurus/domains`)\r\n      .then(res => res.data)\r\n      .catch(tryCastToApiError);\r\n  }\r\n  \r\n  async getDomain(identifier)  {     \r\n    if(!isValid(identifier)) throw Error(`invalid value for identifier`);\r\n\r\n    return this.http.get(`/api/v2013/thesaurus/domains/${encodeURIComponent(identifier)}` )\r\n                    .then(res => res.data)\r\n                    .catch(tryCastToApiError);   \r\n  }\r\n\r\n  async getDomainTerms(identifier, { relations } = {})  {    \r\n    if(!isValid(identifier)) throw Error(`invalid value for identifier`);\r\n\r\n    const params= { };\r\n    if(relations) params.relations = stringifyUrlParam(relations);\r\n\r\n    return this.http.get(`/api/v2013/thesaurus/domains/${encodeURIComponent(identifier)}/terms`, { params } )\r\n                    .then(res => res.data)\r\n                    .catch(tryCastToApiError);\r\n  }\r\n  \r\n  async getTerm(identifier, { relations } = {})  {    \r\n    if(!isValid(identifier)) throw Error(`invalid value for identifier`);  \r\n\r\n    const params= { }; \r\n    if(relations) params.relations = stringifyUrlParam(relations);\r\n\r\n    return this.http.get(`/api/v2013/thesaurus/terms/${encodeURIComponent(identifier)}`,  { params } )\r\n                    .then(res => res.data)\r\n                    .catch(tryCastToApiError); \r\n  }\r\n }\r\n","import { expect, test } from 'vitest'\r\nimport ThesaurusAPI from './thesaurus'\r\n\r\nconst myAPI = new ThesaurusAPI({});\r\n\r\ntest('getDomains func: get all domains', () => {  \r\n    return myAPI.getDomains().then(data => {\r\n      expect.soft(data).toEqual( \r\n          expect.arrayContaining([ \r\n            expect.objectContaining({ \r\n              \"domainId\":   expect.any(Number), \r\n              \"identifier\": expect.any(String),\r\n              \"name\":       expect.any(String)\r\n            }) \r\n        ]) \r\n      )     \r\n    })\r\n})\r\n\r\ntest('getDomain func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getDomain()).rejects.toThrowError(/invalid value for domainIdentifier/)\r\n})\r\n\r\ntest('getDomain func: get domans of countries', () => {  \r\n  return myAPI.getDomain(\"countries\").then(data=> {\r\n      expect.objectContaining({\r\n          \"domainId\":   expect.any(Number),\r\n          \"identifier\": expect.any(String),\r\n          \"name\":       expect.any(String)\r\n      })    \r\n  })\r\n})\r\n\r\ntest('getDomain func: get domain of countries, relation = \"domain\"', () => {  \r\n  return myAPI.getDomain(\"countries\",{relations:\"domain\"}).then(data=> {\r\n      expect.objectContaining({\r\n          \"domainId\":   expect.any(Number),\r\n          \"identifier\": expect.any(String),\r\n          \"name\":       expect.any(String)\r\n      })     \r\n  })\r\n})\r\n\r\ntest('getDomain func: get domain of countries, relation = \"all\"', () => {  \r\n  return myAPI.getDomain(\"countries\",{relations:\"all\"}).then(data=> {\r\n      expect.objectContaining({\r\n          \"domainId\":   expect.any(Number),\r\n          \"identifier\": expect.any(String),\r\n          \"name\":       expect.any(String)\r\n      })     \r\n  })\r\n})\r\n\r\ntest('getTerms func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getTerms()).rejects.toThrowError(/invalid value for termIdentifier/)\r\n})\r\n\r\ntest('getTerms func: get terms of countries', () => {  \r\n  return myAPI.getTerms(\"countries\").then(data=> {\r\n    expect.soft(data).toEqual( \r\n      expect.arrayContaining([ \r\n        expect.objectContaining({\r\n            \"termId\":           expect.any(Number),\r\n            \"identifier\":      expect.any(String),\r\n            \"name\":            expect.any(String),\r\n            \"title\":           expect.any(Object),   \r\n            \"shortTitle\":      expect.any(Object),\r\n            \"description\":     expect.any(String),\r\n            \"longDescription\": expect.any(Object),\r\n            \"source\":          expect.any(String),\r\n            \"broaderTerms\":    expect.any(Array),\r\n            \"narrowerTerms\":   expect.any(Array),\r\n            \"relatedTerms\":    expect.any(Array),\r\n            \"nonPreferedTerms\":expect.any(Array),\r\n          })   \r\n        ])\r\n      )\r\n  }) \r\n})\r\n\r\ntest('getTerm func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getTerm()).rejects.toThrowError(/invalid value for termIdentifier/)  \r\n})\r\n\r\ntest('getTerm func: terms of ad', () => {  \r\n  return myAPI.getTerm(\"ad\").then(data=> {\r\n      expect.objectContaining({\r\n          \"termId\":           expect.any(Number),\r\n          \"identifier\":       expect.any(String),\r\n          \"name\":             expect.any(String),\r\n          \"title\":            expect.any(Object),   \r\n          \"shortTitle\":       expect.any(Object),\r\n          \"description\":      expect.any(String),\r\n          \"longDescription\":  expect.any(Object),\r\n          \"source\":           expect.any(String),\r\n          \"broaderTerms\":     expect.any(Array),\r\n          \"narrowerTerms\":    expect.any(Array),\r\n          \"relatedTerms\":     expect.any(Array),\r\n          \"nonPreferedTerms\": expect.any(Array),\r\n      })   \r\n  })\r\n})\r\n\r\ntest('getTerm func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getTerm()).rejects.toThrowError(/invalid value for termIdentifier/)\r\n  //await expect(() => myAPI.getTermRelation(\"ad\")).rejects.toThrowError(/invalid value for relations/)\r\n})\r\n\r\ntest('getTerm func:  term of ad, relations=all', () => {  \r\n  return myAPI.getTerm(\"ad\",{relations:\"all\"}).then(data=> {\r\n      expect.objectContaining({\r\n          \"termId\":           expect.any(Number),\r\n          \"identifier\":       expect.any(String),\r\n          \"name\":             expect.any(String),\r\n          \"title\":            expect.any(Object),   \r\n          \"shortTitle\":       expect.any(Object),\r\n          \"description\":      expect.any(String),\r\n          \"longDescription\":  expect.any(Object),\r\n          \"source\":           expect.any(String),\r\n          \"broaderTerms\":     expect.any(Array),\r\n          \"narrowerTerms\":    expect.any(Array),\r\n          \"relatedTerms\":     expect.any(Array),\r\n          \"nonPreferedTerms\": expect.any(Array),\r\n      })    \r\n  })\r\n})\r\n\r\ntest('getTerm func:  term of ad', () => {  \r\n  return myAPI.getTerm(\"ad\").then(data=> {\r\n      expect.objectContaining({\r\n        \"termId\":           expect.any(Number),\r\n        \"identifier\":       expect.any(String),\r\n        \"name\":             expect.any(String),\r\n        \"title\":            expect.any(Object),   \r\n        \"shortTitle\":       expect.any(Object),\r\n        \"description\":      expect.any(String),\r\n        \"longDescription\":  expect.any(Object),\r\n        \"source\":           expect.any(String),\r\n        \"broaderTerms\":     expect.any(Array),\r\n        \"narrowerTerms\":    expect.any(Array),\r\n        \"relatedTerms\":     expect.any(Array),\r\n        \"nonPreferedTerms\": expect.any(Array),\r\n      })    \r\n  })\r\n})\r\n\r\ntest('getTerm func:  term of ad, relations=domain', () => {  \r\n  return myAPI.getTerm(\"ad\", {relations:\"domain\"}).then(data=> {\r\n      expect.objectContaining({\r\n        \"termId\":           expect.any(Number),\r\n        \"identifier\":       expect.any(String),\r\n        \"name\":             expect.any(String),\r\n        \"title\":            expect.any(Object),   \r\n        \"shortTitle\":       expect.any(Object),\r\n        \"description\":      expect.any(String),\r\n        \"longDescription\":  expect.any(Object),\r\n        \"source\":           expect.any(String),\r\n        \"broaderTerms\":     expect.any(Array),\r\n        \"narrowerTerms\":    expect.any(Array),\r\n        \"relatedTerms\":     expect.any(Array),\r\n        \"nonPreferedTerms\": expect.any(Array),\r\n      })    \r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["ThesaurusAPI"],"mappings":"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"}