{"version":3,"file":"thesaurus.test.umd.js","sources":["../../../src/services/api/api-base.js","../../../src/services/api/thesaurus.js","../../../src/services/api/thesaurus.test.js"],"sourcesContent":["import axios from 'axios'\r\nimport { isFunction } from 'lodash'\r\nimport * as Vue from 'vue'\r\n\r\nlet sitePrefixUrl = 'https://api.cbd.int';\r\n\r\nif(/\\.cbd\\.int$/i   .test(window?.location?.hostname || '')) sitePrefixUrl= 'https://api.cbd.int';\r\nif(/\\.cbddev\\.xyz$/i.test(window?.location?.hostname || '')) sitePrefixUrl= 'https://api.cbddev.xyz';\r\nif(/\\localhost$/i   .test(window?.location?.hostname || '')) sitePrefixUrl= '/';\r\n\r\nconst defaultOptions = { \r\n   prefixUrl:  sitePrefixUrl, \r\n   timeout  : 30 * 1000,\r\n   token: Vue?.prototype?.$auth?.strategy?.token?.get()  \r\n}\r\n\r\nexport default class ApiBase\r\n{\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    if(isFunction(options)) options = { token : options }\r\n\r\n    const { token, prefixUrl, timeout, tokenType } = { ...defaultOptions, ...options }\r\n\r\n    this.config = {\r\n      baseURL : prefixUrl,\r\n      timeout,\r\n      tokenType,\r\n      token,\r\n    }\r\n\r\n    const http = async function (...args) {   \r\n      return (await loadAsyncHeaders(this.config))(...args);\r\n    }\r\n\r\n    http.get     = async (...args)=> (await loadAsyncHeaders(this.config)).get    (...args);\r\n    http.head    = async (...args)=> (await loadAsyncHeaders(this.config)).head   (...args);\r\n    http.post    = async (...args)=> (await loadAsyncHeaders(this.config)).post   (...args);\r\n    http.put     = async (...args)=> (await loadAsyncHeaders(this.config)).put    (...args);\r\n    http.patch   = async (...args)=> (await loadAsyncHeaders(this.config)).patch  (...args);\r\n    http.delete  = async (...args)=> (await loadAsyncHeaders(this.config)).delete (...args);\r\n    http.options = async (...args)=> (await loadAsyncHeaders(this.config)).options(...args);\r\n    http.request = async (...args)=> (await loadAsyncHeaders(this.config)).request(...args);\r\n\r\n    this.http = http;\r\n  }\r\n}\r\n\r\nasync function loadAsyncHeaders(baseConfig) {\r\n\r\n  const { token, tokenType, ...config } = baseConfig || {}\r\n\r\n  const headers = { ...(config.headers || {}) };\r\n\r\n  if(token) {\r\n      headers.Authorization = `${tokenType||'Bearer'} ${token}`;\r\n  }\r\n\r\n  return axios.create({ ...config, headers } );\r\n\r\n}\r\n\r\n//////////////////////////\r\n// Helpers\r\n////////////////////////\r\n\r\nexport function tryCastToApiError(error) {\r\n\r\n  if(error && error.response && error.response.data && error.response.data.code) {\r\n      const apiError = error.response.data\r\n      throw error.response.data;\r\n  }\r\n\r\n  throw error\r\n}\r\n\r\nexport function stringifyUrlParam(value) {\r\n  if (value instanceof(Date))   {return value.toISOString()}    \r\n  if (value instanceof(Object)) {return JSON.stringify(value)}  \r\n  return value; \r\n}\r\n\r\nexport function stringifyUrlParams(valueObj) {\r\n  const returnObj = {};\r\n\r\n  for (const [key, value] of Object.entries(valueObj)) {\r\n    if (isValid(value)){\r\n      returnObj[key] = stringifyUrlParam(value);\r\n    }\r\n  }\r\n  \r\n  return returnObj;\r\n}\r\n\r\nexport function mapObjectId(id){  \r\n  return isObjectId(id)? { $oid: id } : id\r\n}\r\n\r\nexport function isObjectId(id){\r\n  return /^[a-f0-9]{24}/i.test(id);\r\n}\r\n\r\nexport function isValid(params){\r\n  return ![undefined, null].includes(params);\r\n}","\r\nimport ApiBase, { tryCastToApiError, stringifyUrlParam, isValid} from './api-base';\r\n\r\nexport default class ThesaurusApi extends ApiBase\r\n{\r\n  \r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  async getDomains()  { \r\n    return this.http.get(`/api/v2013/thesaurus/domains`)\r\n      .then(res => res.data)\r\n      .catch(tryCastToApiError);\r\n  }\r\n  \r\n  async getDomain(identifier)  {     \r\n    if(!isValid(identifier)) throw Error(`invalid value for identifier`);\r\n\r\n    return this.http.get(`/api/v2013/thesaurus/domains/${encodeURIComponent(identifier)}` )\r\n                    .then(res => res.data)\r\n                    .catch(tryCastToApiError);   \r\n  }\r\n\r\n  async getDomainTerms(identifier, { relations } = {})  {    \r\n    if(!isValid(identifier)) throw Error(`invalid value for identifier`);\r\n\r\n    const params= { };\r\n    if(relations) params.relations = stringifyUrlParam(relations);\r\n\r\n    return this.http.get(`/api/v2013/thesaurus/domains/${encodeURIComponent(identifier)}/terms`, { params } )\r\n                    .then(res => res.data)\r\n                    .catch(tryCastToApiError);\r\n  }\r\n  \r\n  async getTerm(identifier, { relations } = {})  {    \r\n    if(!isValid(identifier)) throw Error(`invalid value for identifier`);  \r\n\r\n    const params= { }; \r\n    if(relations) params.relations = stringifyUrlParam(relations);\r\n\r\n    return this.http.get(`/api/v2013/thesaurus/terms/${encodeURIComponent(identifier)}`,  { params } )\r\n                    .then(res => res.data)\r\n                    .catch(tryCastToApiError); \r\n  }\r\n }\r\n","import { expect, test } from 'vitest'\r\nimport ThesaurusAPI from './thesaurus'\r\n\r\nconst myAPI = new ThesaurusAPI({});\r\n\r\ntest('getDomains func: get all domains', () => {  \r\n    return myAPI.getDomains().then(data => {\r\n      expect.soft(data).toEqual( \r\n          expect.arrayContaining([ \r\n            expect.objectContaining({ \r\n              \"domainId\":   expect.any(Number), \r\n              \"identifier\": expect.any(String),\r\n              \"name\":       expect.any(String)\r\n            }) \r\n        ]) \r\n      )     \r\n    })\r\n})\r\n\r\ntest('getDomain func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getDomain()).rejects.toThrowError(/invalid value for domainIdentifier/)\r\n})\r\n\r\ntest('getDomain func: get domans of countries', () => {  \r\n  return myAPI.getDomain(\"countries\").then(data=> {\r\n      expect.objectContaining({\r\n          \"domainId\":   expect.any(Number),\r\n          \"identifier\": expect.any(String),\r\n          \"name\":       expect.any(String)\r\n      })    \r\n  })\r\n})\r\n\r\ntest('getDomain func: get domain of countries, relation = \"domain\"', () => {  \r\n  return myAPI.getDomain(\"countries\",{relations:\"domain\"}).then(data=> {\r\n      expect.objectContaining({\r\n          \"domainId\":   expect.any(Number),\r\n          \"identifier\": expect.any(String),\r\n          \"name\":       expect.any(String)\r\n      })     \r\n  })\r\n})\r\n\r\ntest('getDomain func: get domain of countries, relation = \"all\"', () => {  \r\n  return myAPI.getDomain(\"countries\",{relations:\"all\"}).then(data=> {\r\n      expect.objectContaining({\r\n          \"domainId\":   expect.any(Number),\r\n          \"identifier\": expect.any(String),\r\n          \"name\":       expect.any(String)\r\n      })     \r\n  })\r\n})\r\n\r\ntest('getTerms func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getTerms()).rejects.toThrowError(/invalid value for termIdentifier/)\r\n})\r\n\r\ntest('getTerms func: get terms of countries', () => {  \r\n  return myAPI.getTerms(\"countries\").then(data=> {\r\n    expect.soft(data).toEqual( \r\n      expect.arrayContaining([ \r\n        expect.objectContaining({\r\n            \"termId\":           expect.any(Number),\r\n            \"identifier\":      expect.any(String),\r\n            \"name\":            expect.any(String),\r\n            \"title\":           expect.any(Object),   \r\n            \"shortTitle\":      expect.any(Object),\r\n            \"description\":     expect.any(String),\r\n            \"longDescription\": expect.any(Object),\r\n            \"source\":          expect.any(String),\r\n            \"broaderTerms\":    expect.any(Array),\r\n            \"narrowerTerms\":   expect.any(Array),\r\n            \"relatedTerms\":    expect.any(Array),\r\n            \"nonPreferedTerms\":expect.any(Array),\r\n          })   \r\n        ])\r\n      )\r\n  }) \r\n})\r\n\r\ntest('getTerm func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getTerm()).rejects.toThrowError(/invalid value for termIdentifier/)  \r\n})\r\n\r\ntest('getTerm func: terms of ad', () => {  \r\n  return myAPI.getTerm(\"ad\").then(data=> {\r\n      expect.objectContaining({\r\n          \"termId\":           expect.any(Number),\r\n          \"identifier\":       expect.any(String),\r\n          \"name\":             expect.any(String),\r\n          \"title\":            expect.any(Object),   \r\n          \"shortTitle\":       expect.any(Object),\r\n          \"description\":      expect.any(String),\r\n          \"longDescription\":  expect.any(Object),\r\n          \"source\":           expect.any(String),\r\n          \"broaderTerms\":     expect.any(Array),\r\n          \"narrowerTerms\":    expect.any(Array),\r\n          \"relatedTerms\":     expect.any(Array),\r\n          \"nonPreferedTerms\": expect.any(Array),\r\n      })   \r\n  })\r\n})\r\n\r\ntest('getTerm func: throw error on wrong params ', async () => {\r\n  await expect(() => myAPI.getTerm()).rejects.toThrowError(/invalid value for termIdentifier/)\r\n  //await expect(() => myAPI.getTermRelation(\"ad\")).rejects.toThrowError(/invalid value for relations/)\r\n})\r\n\r\ntest('getTerm func:  term of ad, relations=all', () => {  \r\n  return myAPI.getTerm(\"ad\",{relations:\"all\"}).then(data=> {\r\n      expect.objectContaining({\r\n          \"termId\":           expect.any(Number),\r\n          \"identifier\":       expect.any(String),\r\n          \"name\":             expect.any(String),\r\n          \"title\":            expect.any(Object),   \r\n          \"shortTitle\":       expect.any(Object),\r\n          \"description\":      expect.any(String),\r\n          \"longDescription\":  expect.any(Object),\r\n          \"source\":           expect.any(String),\r\n          \"broaderTerms\":     expect.any(Array),\r\n          \"narrowerTerms\":    expect.any(Array),\r\n          \"relatedTerms\":     expect.any(Array),\r\n          \"nonPreferedTerms\": expect.any(Array),\r\n      })    \r\n  })\r\n})\r\n\r\ntest('getTerm func:  term of ad', () => {  \r\n  return myAPI.getTerm(\"ad\").then(data=> {\r\n      expect.objectContaining({\r\n        \"termId\":           expect.any(Number),\r\n        \"identifier\":       expect.any(String),\r\n        \"name\":             expect.any(String),\r\n        \"title\":            expect.any(Object),   \r\n        \"shortTitle\":       expect.any(Object),\r\n        \"description\":      expect.any(String),\r\n        \"longDescription\":  expect.any(Object),\r\n        \"source\":           expect.any(String),\r\n        \"broaderTerms\":     expect.any(Array),\r\n        \"narrowerTerms\":    expect.any(Array),\r\n        \"relatedTerms\":     expect.any(Array),\r\n        \"nonPreferedTerms\": expect.any(Array),\r\n      })    \r\n  })\r\n})\r\n\r\ntest('getTerm func:  term of ad, relations=domain', () => {  \r\n  return myAPI.getTerm(\"ad\", {relations:\"domain\"}).then(data=> {\r\n      expect.objectContaining({\r\n        \"termId\":           expect.any(Number),\r\n        \"identifier\":       expect.any(String),\r\n        \"name\":             expect.any(String),\r\n        \"title\":            expect.any(Object),   \r\n        \"shortTitle\":       expect.any(Object),\r\n        \"description\":      expect.any(String),\r\n        \"longDescription\":  expect.any(Object),\r\n        \"source\":           expect.any(String),\r\n        \"broaderTerms\":     expect.any(Array),\r\n        \"narrowerTerms\":    expect.any(Array),\r\n        \"relatedTerms\":     expect.any(Array),\r\n        \"nonPreferedTerms\": expect.any(Array),\r\n      })    \r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["sitePrefixUrl","test","_window","window","location","hostname","_window2","_window3","defaultOptions","prefixUrl","timeout","token","Vue","_Vue__namespace$proto","prototype","$auth","strategy","get","ApiBase","constructor","options","_this","isFunction","tokenType","config","baseURL","http","loadAsyncHeaders","arguments","head","post","put","patch","delete","request","baseConfig","headers","Authorization","concat","axios","create","tryCastToApiError","error","response","data","code","stringifyUrlParam","value","Date","toISOString","Object","JSON","stringify","isValid","params","undefined","includes","ThesaurusApi","getDomains","then","res","catch","getDomain","identifier","Error","encodeURIComponent","getDomainTerms","relations","length","getTerm","myAPI","ThesaurusAPI","vitest","expect","soft","toEqual","arrayContaining","objectContaining","any","Number","String","rejects","toThrowError","getTerms","Array"],"mappings":"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"}