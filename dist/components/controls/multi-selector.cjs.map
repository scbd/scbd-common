{"version":3,"file":"multi-selector.cjs","sources":["../../../src/services/util/arrays.js","../../../src/components/controls/multi-selector.vue"],"sourcesContent":["import _ from 'lodash';\r\nimport { useI18n} from '@/services/composables/i18n';\r\nimport { lstring } from '@/services/filters/lstring'  \r\n\r\n\r\nexport function asArray(data) {\r\n    return _([ data ])\r\n      .flatten()\r\n      .compact()\r\n      .value();\r\n}\r\n\r\nexport function sortBy(list, property){    \r\n  //const { locale } = useNuxtApp().$i18n;\r\n  const {t, locale }    = useI18n();  \r\n  return list.sort((a ,b )=>{\r\n      let valueA = a[property];\r\n      let valueB = b[property];\r\n\r\n      if(isLString(valueA)){\r\n          valueA = lstring(valueA, locale.value)\r\n          valueB = lstring(valueB, locale.value)\r\n      }\r\n\r\n      return valueA.localeCompare(valueB);\r\n\r\n  })\r\n}\r\n","\r\n<template> \r\n  <VueMultiselect\r\n    v-model=\"selectItems\"\r\n    :label=\"label\"\r\n    :track-by=\"trackBy\"\r\n    :placeholder=\"placeholder\"\r\n    :open-direction=\"openDirection\"\r\n    :options=\"options\"\r\n    :group-values=\"groupValues\"\r\n    :group-label=\"groupLabel\"\r\n    :group-select=\"groupSelect\"\r\n    :multiple=\"multiple\"\r\n    :clear-on-select=\"clearOnSelect\"\r\n    :close-on-select=\"closeOnSelect\"      \r\n    :searchable=\"searchable\"\r\n    :disabled=\"disabled\"\r\n    @search-change=\"onEventTextChange\"\r\n    \r\n    :custom-label=\"customLabel\"\r\n    :allow-empty=\"allowEmpty\"\r\n    deselect-label=\"Can't remove this value\"\r\n  > \r\n    <slot name=\"clear\">\r\n      <template slot=\"clear\">\r\n        <div\r\n          v-if=\"selectItems.length && !disabled\"\r\n          class=\"multiselect__clear\"\r\n          @mousedown.prevent.stop=\"selectItems = null; $emit('change', null)\"\r\n        />\r\n      </template>\r\n    </slot>     \r\n  </VueMultiselect>\r\n\r\n</template>\r\n\r\n<script setup >  \r\nimport VueMultiselect from 'vue-multiselect';\r\nimport { asArray } from   '../../services/util/index.js';\r\nimport { isEqual, compact } from 'lodash';\r\n\r\nimport {computed, ref, defineProps, defineEmits, onMounted,defineModel} from 'vue'\r\nconst emit = defineEmits(['update:model-value', \"on-select\",\"on-remove\",\"on-search-change\",\"on-open\", \"on-close\", \"on-add-tag\",\"on-value-change\"]);\r\n\r\nconst props = defineProps({   \r\n    modelValue     : {type:[ String, Array, Object ], required:true, default:() => []},\r\n    options      : { type: Array, required: true },\r\n    label        : { type: String },\r\n    trackBy      : { type: String },  \r\n    placeholder  : { type: String,  default: 'Select option' },\r\n    openDirection: { type: String, default: 'below' },\r\n    groupValues  : { type: String },\r\n    groupLabel   : { type: String },\r\n    groupSelect  : { type: Boolean, default: false },\r\n    multiple     : { type: Boolean, default: false },\r\n    clearOnSelect: { type: Boolean, default: true },  \r\n    closeOnSelect: { type: Boolean, default: true },\r\n    searchable   : { type: Boolean, default: true },\r\n    disabled     : { type: Boolean, default: false },\r\n    customLabel  : { type: Function,\r\n      default (option, label) {\r\n        // if (isEmpty(option)) return ''\r\n        return label ? option[label] : option\r\n      }\r\n    },\r\n    allowEmpty   : { type: Boolean, default: true },\r\n    valueKey     : { type: String, required: true},\r\n    customSelectedItem  : {type: Function,default (item) {return item;}},\r\n    isValid      : { type: [ Boolean, Function ],  default: null },   \r\n});\r\n\r\nconst onEventTextChange=(...args)=>{\r\n  this.$emit('on-search-change', ...args)\r\n};\r\nconst fetchOptions=()=>{\r\n  this.options = this.optionsFn();\r\n}   \r\nlet selectItems = computed({  \r\n    get() {\r\n      const selected = asArray(props.modelValue).map((value) => {\r\n        return props.options?.find((option) => {\r\n          const customSelectedItem =props.customSelectedItem(option[props.valueKey], option);\r\n          \r\n          return isEqual(customSelectedItem, value);\r\n        })\r\n      });\r\n\r\n      return compact(selected)\r\n    },\r\n    set(events) {\r\n      let ids = asArray(events).map((event) => props.customSelectedItem(event[props.valueKey], event));     \r\n      emit('update:model-value', props.multiple ? ids : ids[0]);\r\n    },\r\n  }\r\n); \r\n</script>\r\n<!-- ToDo: need to fix the path -->\r\n<!-- <style src=\"vue-multiselect/dist/vue-multiselect.css\"></style> -->\r\n"],"names":["_","computed","isEqual","compact"],"mappings":";;;;;;;;;;;;;AAKO,SAAS,OAAO,CAAC,IAAI,EAAE;AAC9B,IAAI,OAAOA,qBAAC,CAAC,EAAE,IAAI,EAAE,CAAC;AACtB,OAAO,OAAO,EAAE;AAChB,OAAO,OAAO,EAAE;AAChB,OAAO,KAAK,EAAE,CAAC;AACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0Be;AAMf,MAAM,IAAI,GAAG,MAAqI,CAAC;AACnJ;AACA,MAAM,KAAK,GAAG,OAyBZ,CAAC;AACH;AACA,MAAM,iBAAiB,CAAC,CAAC,GAAG,IAAI,GAAG;AACnC,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,IAAI,EAAC;AACzC,CAAC,CAAC;AAIF,IAAI,WAAW,GAAGC,YAAQ,CAAC;AAC3B,IAAI,GAAG,GAAG;AACV,MAAM,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK;AAChE,QAAQ,OAAO,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK;AAC/C,UAAU,MAAM,kBAAkB,EAAE,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;AAC7F;AACA,UAAU,OAAOC,SAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;AACpD,SAAS,CAAC;AACV,OAAO,CAAC,CAAC;AACT;AACA,MAAM,OAAOC,SAAO,CAAC,QAAQ,CAAC;AAC9B,KAAK;AACL,IAAI,GAAG,CAAC,MAAM,EAAE;AAChB,MAAM,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AACvG,MAAM,IAAI,CAAC,oBAAoB,EAAE,KAAK,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,KAAK;AACL,GAAG;AACH,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}